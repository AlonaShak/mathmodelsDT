%% Математичні моделі для цифрових двійників промислових об'єктів
%% Лабораторна робота №5. Навчання нейронної мережі
%  Інструкції
%  ------------
%
% Цей файл містить код, який допоможе навчитися виконувати багатокласову класифікацію.
% У ЛР Вам потрібно буде доповнити наступні функції:
%
%     sigmoidGradient.m
%     randInitializeWeights.m
%     nnCostFunction.m
%
% У цій ЛР вам не потрібно змінювати код у цьому файлі.
%

%% Ініціалізація

clear ; close all; clc

%% Налаштування параметрів
input_layer_size  = 400;  % 20x20 Вхідні зображення цифр
hidden_layer_size = 25;   % 25 прихованих нейронів
num_labels = 10;          % 10 міток, від 1 до 10


%% =========== Частина 1: Завантаження та візуалізація даних =============
%

% Завантаження навчальних даних
fprintf('Завантаження та візуалізація даних ...\n')

load('ex5data1.mat');
m = size(X, 1);

% Довільний вибір 100 точок даних для відображення
sel = randperm(size(X, 1));
sel = sel(1:100);

displayData(X(sel, :));

fprintf('Програму призупинено. Натисніть enter, щоб продовжити.\n');
pause;


%% ================ Частина 2: Завантаження параметрів ================
% Завантаження деяких попередньо ініціалізованих параметрів нейронної мережі.

fprintf('\nЗавантаження деяких попередньо ініціалізованих параметрів нейронної мережі ...\n')

% Завантаження ваг зв'язків в змінні Theta1 і Theta2
load('ex5weights.mat');
% Матриці Theta1 і Theta2 тепер будуть у робочому середовищі
% Theta1 має розмір 25 x 401
% Theta2 має розмір 10 x 26

% Об'єднання параметрів
nn_params = [Theta1(:) ; Theta2(:)];

%% ================ Частина 3: Обчислення функції якості (Пряме поширення) ================
% Пропонується обчислити функцію якості з використанням алгоритму прямого поширення
% *без* регулярізації, щоб вам було простіше відлагодити код.
% Пізніше ви зможете реалізувати функцію якості з регуляризацією.
%
fprintf('\nПряме поширення з використанням нейронної мережі ...\n')

% Ваговий аараметр регулярізації(тут ми встановлюємо значення 0).
lambda = 0;

J = nnCostFunction(nn_params, input_layer_size, hidden_layer_size, ...
                   num_labels, X, y, lambda);

fprintf(['Функція якості при параметрах завантажених з ex5weights: %f '...
         '\n(це значення має бути приблизно 0.287629)\n'], J);

fprintf('\nПрограму призупинено. Натисніть enter, щоб продовжити.\n');
pause;

%% =============== Частина 4: Реалізація регуляризації ===============
% Після правильної реалізації функції якості вам слід продовжити
% реалізацію функції якості з регулярізацією.
%

fprintf('\nПеревірка функції якості (w/ з регуляризацією) ... \n')

% Ваговий параметр регулярізації тут ми встановлюємо значення 1).
lambda = 1;

J = nnCostFunction(nn_params, input_layer_size, hidden_layer_size, ...
                   num_labels, X, y, lambda);

fprintf(['Функція якості при параметрах завантажених з ex5weights: %f '...
         '\n(це значення має бути приблизно 0.383770)\n'], J);

fprintf('Програму призупинено. Натисніть enter, щоб продовжити.\n');
pause;


%% ================ Частина 5: Похідна сигмоїдної функції ================
%Перш ніж почати реалізацію нейронної мережі, ви спочатку реалізуєте градієнт
%для сигмоїдної функції. Ви повинні завершити код у файлі sigmoidGradient.m.
%

fprintf('\nОбчислення похідної сигмоїдної функції...\n')

g = sigmoidGradient([-1 -0.5 0 0.5 1]);
fprintf('Значення похідної сигмоїдної функції при [-1 -0.5 0 0.5 1]:\n  ');
fprintf('%f ', g);
fprintf('\n\n');

fprintf('Програму призупинено. Натисніть enter, щоб продовжити.\n');
pause;


%% ================ Частина 6: Ініціалізація параметрів ================
%У цій частині ви почнете впроваджувати двошарову нейронну мережу,
%яка класифікує цифри. Ви почнете з реалізації функції для ініціалізації
%ваг нейронної мережі (randInitializeWeights.m)

fprintf('\nІніціалізація параметрів нейронно мережі...\n')

initial_Theta1 = randInitializeWeights(input_layer_size, hidden_layer_size);
initial_Theta2 = randInitializeWeights(hidden_layer_size, num_labels);

% Об'єднання параметрів
initial_nn_params = [initial_Theta1(:) ; initial_Theta2(:)];


%% ============Частина 7: Алгоритм зворотного поширення помилки ===============
% Коли ваші функції будуть збігаютися з наведеними, ви повинні продовжити впровадження алгоритму
% зворотного поширення помилки для нейронної мережі. Ви повинні додати до коду,
% який ви написали в nnCostFunction.m, щоб повертати часткові похідні параметрів.
%
fprintf('\nПеревірка зворотного поширення помилки... \n');

%  Перевірка похідних функцією checkNNGradients
checkNNGradients;

fprintf('\nПрограму призупинено. Натисніть enter, щоб продовжити.\n');
pause;


%% =============== Частина 8: Реалізація регуляризації===============
%  Після правильної реалізації алгоритму зворотного поширення помилки
%  вам слід продовжити реалізацію функції якості з регулярізаціє.
%

fprintf('\nПеревірка алгоритму зворотного поширення помилки (w/ з регуляризацією) ... \n')

%  Перевірка обчислення похідних функцією checkNNGradients
lambda = 3;
checkNNGradients(lambda);

% Виведення значення функції якості при тестових значеннях параметрів
debug_J  = nnCostFunction(nn_params, input_layer_size, ...
                          hidden_layer_size, num_labels, X, y, lambda);

fprintf(['\n\nФункція якості при фіксованих тестових параметрах (w/ lambda = %f): %f ' ...
         '\n(для lambda = 3, це значення має бути приблизно 0.576051)\n\n'], lambda, debug_J);

fprintf('Програму призупинено. Натисніть enter, щоб продовжити.\n');
pause;


%% =================== Частина 8: Навчання нейронної мережі ===================
% Тепер ви реалізували весь код, необхідний для навчання нейронної мережі.
% Щоб навчити вашу нейронну мережу, буде використовуватися функція "fmincg",
% яка є функцією, що працює подібно до "fminunc".
% Пам’ятайте, що ці просунуті оптимізатори здатні ефективно навчати
% функції якості, якщо ми надаємо їм градієнтні обчислення.
%
fprintf('\nНавчання нейронної мережі... \n')

% Після того, як ви виконали завдання, змініть MaxIter на більше значення,
% проаналізуйте ефект.
options = optimset('MaxIter', 50);

%  Ви також повинні спробувати різні значення lambda
lambda = 1;


costFunction = @(p) nnCostFunction(p, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, X, y, lambda);

[nn_params, cost] = fmincg(costFunction, initial_nn_params, options);


Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

fprintf('Програму призупинено. Натисніть enter, щоб продовжити.\n');
pause;



%% ================= Частина 9: Реалізація прогнозування =================

pred = predict(Theta1, Theta2, X);

fprintf('\nТочність нейронної мережі відносно навчальної множини: %f\n', mean(double(pred == y)) * 100);


