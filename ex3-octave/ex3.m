%% Математичні моделі для цифрових двійників промислових об'єктів
%% Лабораторна робота №3. Логістична регресія
%  Інструкції
%  ------------
%
% Цей файл містить код, який допоможе навчитися вирішувати задачі логістичної регресії.
% У ЛР Вам потрібно буде доповнити наступні функції:
%
%     sigmoid.m
%     costFunction.m
%     predict.m
%
% У цій ЛР вам не потрібно змінювати код у цьому файлі.
%

%% Ініціалізація
clear ; close all; clc

%% Завантаження даних
% Перші два стовпці містять бали за іспит, а третій стовпець
% містить мітку (зарахований/не зарахований).

data = load('ex3data1.txt');
X = data(:, [1, 2]); y = data(:, 3);

%% ==================== Частина 1: Відображення даних ====================
% Спочатку візуалізуємо дані, щоб зрозуміти проблему, з якою ми працюємо.

fprintf(['Будуємо графік даних, де + відображає (y = 1) приклади і o ' ...
         'відображає (y = 0) приклади.\n']);

plotData(X, y);

% Встановлення назв осей
hold on;
% Назви осей і легенда
xlabel('Кількість балів за 1 екзамен')
ylabel('Кількість балів за 2 екзамен')

legend('Зараховано', 'Не зараховано')
hold off;

fprintf('\nПрограму призупинено. Натисніть enter, щоб продовжити.\n');
pause;


%% ============ Частина 2: Розрахунок функції якості та градієнту ============
%  В цій частині потрібно розрахувати функцію якості та градієнт
%  для логістичної регресії. Потрібно доповнити код у файлі
%  costFunction.m

%  Налаштування матриці даних, додавання одиничного стовпчика,
%  для врахування вектора вільних членів
[m, n] = size(X);

% Додавання вектора вільних членів до x та X_test
X = [ones(m, 1) X];

% Задання початкових значень параметрів
initial_theta = zeros(n + 1, 1);

% Розрахунок та відображення початкових значень функції якості та градієнту
[cost, grad] = costFunction(initial_theta, X, y);

fprintf('Функція якості при початкових значеннях theta (нульові): %f\n', cost);
fprintf('Очікуване значення функції якості (приблизно): 0.693\n');
fprintf('Градієнт при початкових значеннях theta (нульові): \n');
fprintf(' %f \n', grad);
fprintf('Очікуване значення градієнтів (приблизно):\n -0.1000\n -12.0092\n -11.2628\n');

%  Розрахунок та відображення функції якості та градієнту при ненульових значеннях theta
test_theta = [-24; 0.2; 0.2];
[cost, grad] = costFunction(test_theta, X, y);

fprintf('\nФункція якості при тестових значеннях theta: %f\n', cost);
fprintf('Очікуване значення функції якості (приблизно): 0.218\n');
fprintf('Градієнт при тестових значеннях theta: \n');
fprintf(' %f \n', grad);
fprintf('Очікуване значення градієнтів (приблизно):\n 0.043\n 2.566\n 2.647\n');

fprintf('\nПрограму призупинено. Натисніть enter, щоб продовжити.\n');
pause;


%% ============= Частина 3: Оптимізація з використанням функції fminunc  =============
%  У цій частині ви будете використовувати вбудовану функцію (fminunc),
%  щоб знайти оптимальні параметри theta.

%  Встановлення параметрів для fminunc
options = optimset('GradObj', 'on', 'MaxIter', 400);

%  Запуск fminunc, щоб отримати оптимальні значення theta
%  Ця функція поверне theta та функцію якості
[theta, cost] = ...
	fminunc(@(t)(costFunction(t, X, y)), initial_theta, options);

% Виведення значень theta
fprintf('Функція якості при оптимальних значеннях theta розрахованих функцією fminunc: %f\n', cost);
fprintf('Очікуване значення функції якості (приблизно): 0.203\n');
fprintf('theta: \n');
fprintf(' %f \n', theta);
fprintf('Очікувані значення theta (приблизно):\n');
fprintf(' -25.161\n 0.206\n 0.201\n');

% Побудова діаграми розсіювання з граничною лінією рішення
plotDecisionBoundary(theta, X, y);

% Встановлення назв осей
hold on;
% Назви осей і легенда
xlabel('Кількість балів за 1 екзамен')
ylabel('Кількість балів за 2 екзамен')

legend('Зараховано', 'Не зараховано')
hold off;

fprintf('\nПрограму призупинено. Натисніть enter, щоб продовжити.\n');
pause;

%% ============== Частина 4: Прогнозування та точність ==============
% Після знаходження оптимальних параметрів, ви захочете використовувати їх
% для прогнозування результатів на основі нових даних.
% У цій частині ви будете використовувати модель логістичної регресії, щоб передбачити ймовірність того,
% що студента з балом 45 за перший іспит і балом 85 за другий іспит буде зараховано.
%
%  Крім того, ви обчислите точність навчального та тестового набору нашої моделі.
%
%  Ваше завдання завершити код у predict.m

%  Прогнозована ймовірність для студента з балом 45 за перший іспит
%  і балом 85 за другий іспит
prob = sigmoid([1 45 85] * theta);
fprintf(['Для студента з балами 45 і 85 ми прогнозуємо зарахування ' ...
         'з ймовірністю %f\n'], prob);
fprintf('Очікуване значення: 0.775 +/- 0.002\n\n');

% Обчислення точності на навчальній вибірці
p = predict(theta, X);

fprintf('Точність відносно навчальної вибірки: %f\n', mean(double(p == y)) * 100);
fprintf('Очікувана точність (приблизно): 89.0\n');
fprintf('\n');


